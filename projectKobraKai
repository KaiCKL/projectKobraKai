from pygame import *
from random import randint
from time import time as timer

font.init()
font1 = font.Font(None, 80)
win = font1.render('YOU WIN!', True, (255,255, 255))
lose = font1.render('YOU LOSE!', True, (180, 0, 0))

font2 = font.SysFont('Arial', 40)

win_width = 700
win_height = 500

window = display.set_mode((700, 500))
display.set_caption("Shooter")
background = transform.scale(image.load("space.png"), (700, 500))

mixer.init()
mixer.music.load('space.ogg')
mixer.music.play()
fire_sound = mixer.Sound('shadowclaw.ogg')

font.init()
font2 = font.Font(None, 36)

img_hero = 'hero.png'
img_bullet = 'shadowball.png'
img_enemy = 'warbot.png'
img_asteroid = 'energyball.png'

score = 0
lost = 0
life = 5

max_score = 10
max_lost = 5

class GameSprite(sprite.Sprite):
    def __init__(self, player_image, player_x, player_y, size_x, size_y, player_speed):
        sprite.Sprite.__init__(self)

        self.image = transform.scale(image.load(player_image), (size_x, size_y))
        self.speed = player_speed
        self.rect= self.image.get_rect()
        self.rect.x = player_x
        self.rect.y = player_y

    def reset(self):
        window.blit(self.image, (self.rect.x, self.rect.y))

class Player(GameSprite):
    def update(self):
        keys = key.get_pressed()
        if keys[K_LEFT] and self.rect.x > 5:
            self.rect.x -= self.speed
        if keys[K_RIGHT] and self.rect.x < win_width - 80:
            self.rect.x += self.speed

    def fire(self):
        bullet = Bullet(img_bullet, self.rect.centerx, self.rect.top, 15, 20, -15)
        bullets.add(bullet) 
        fire_sound.play()

class Enemy(GameSprite):
    def update(self):
        self.rect.y += self.speed
        global lost

        if self.rect.y > win_height:
            self.rect.x = randint(80,win_width - 80)
            self.rect.y = 0
            lost = lost + 1
        
class Bullet(GameSprite):
    def update(self):
        self.rect.y += self.speed

        if self.rect.y < 0:
            self.kill()

class Asteroids(GameSprite):
    def update(self):
        self.rect.y += self.speed
        global lost

        if self.rect.y > win_height:
            self.rect.x = randint(80,win_width - 80)
            self.rect.y = 0        
            
asteroids = sprite.Group()
for i in range(1, 3):  
    Asteroid = Asteroids(img_asteroid, randint(80, win_width - 80), -40, 70, 70, randint(1, 5))
    asteroids.add(Asteroid)



ship = Player(img_hero, 5, win_height-100, 80, 100, 10)

monsters = sprite.Group()
for i in range(1, 6):  
    monster = Enemy(img_enemy, randint(80, win_width - 80), -30, 70, 70, randint(1, 5))
    monsters.add(monster)

bullets = sprite.Group()

finish = False
run = True
rel_time = False
num_fire = 0

while run:
    for e in event.get():
        if e.type == QUIT:
            run = False 

        elif e.type == KEYDOWN:
            if e.key == K_SPACE:

                if num_fire < 5 and rel_time == False:
                    num_fire = num_fire + 1
                    fire_sound.play()
                    ship.fire()

                if num_fire >= 5 and rel_time == False:
                    last_time = timer()#reload time when happen
                    rel_time = True#set reload flag

    if not finish:
        window.blit(background, (0,0))

        text = font2.render("Score: " + str(score), 1, (255, 255, 255))
        window.blit(text, (10, 20))

        text_lose = font2.render("Missed: " + str(lost), 1, (255, 255, 255))
        window.blit(text_lose, (10, 50))

        text_life = font2.render("Life: " + str(life), 1, (255, 255, 255))
        window.blit(text_life, (10, 80))

        ship.update()
        monsters.update()
        bullets.update()
        asteroids.update()
        
        ship.reset()
        monsters.draw(window)
        bullets.draw(window)
        asteroids.draw(window)
        
        if rel_time == True:
            now_time = timer()

            if now_time - last_time < 2:
                reload = font2.render('RELOADING...', 1, (150, 0, 0))
                window.blit(reload, (260, 360))
            else:
                num_fire = 0
                rel_time = False

        if sprite.spritecollide(ship, monsters, False) or sprite.spritecollide(ship, asteroids, False):
            sprite.spritecollide(ship, monsters, True)
            sprite.spritecollide(ship, asteroids, True)
            life = life - 1

        if life == 0 or lost >= max_lost:
            finish = True
            window.blit(lose, (200, 200))

        if score >= 20:
            finish = True
            window.blit(win, (200, 200))

        collides = sprite.groupcollide(bullets, monsters, True, True)
        for c in collides:
            score += 1
            monster = Enemy(img_enemy, randint(80, win_width - 80), -30, 70, 70, randint(1, 5))
            monsters.add(monster)

        display.update()

    else:
        finish = False
        score = 0
        lost = 0
        life = 3
        for b in bullets:
            b.kill()
        for m in monsters:
            m.kill()

        time.delay(3000)
        for i in range(1, 6):  
            monster = Enemy(img_enemy, randint(80, win_width - 80), -30, 70, 70, randint(1, 5))
            monsters.add(monster)

    time.delay(50)
